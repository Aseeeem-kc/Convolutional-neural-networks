# -*- coding: utf-8 -*-
"""CatsVsDogs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/136OuX-Yn9F_Kd8SOaPOFbAfBh2xggD0i
"""

# importing the modules

import os
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
kera = tf.keras
import keras

# importing the image dataset
import tensorflow_datasets as tfds

# splitting the data for training, testing and validation
(raw_train, raw_validation, raw_test), metadata = tfds.load(
    'cats_vs_dogs',
    split=['train[:80%]', 'train[80%:90%]', 'train[90%:]'],
    with_info=True,
    as_supervised=True,
)

# creates a function object that we can use to get labels
get_label_name = metadata.features['label'].int2str

# display 2 images from the dataset
for image, label in raw_train.take(2):
  plt.figure()
  plt.imshow(image)
  plt.title(get_label_name(label))

# re-sizing our images as all the images are in different size

IMG_SIZE = 160 # All images will be resized to 160x160

def format_example(image, label):
  """
  returns an image that is reshaped to IMG_SIZE
  """
  image = tf.cast(image, tf.float32)
  image = (image/127.5) - 1
  image = tf.image.resize(image, (IMG_SIZE, IMG_SIZE))
  return image, label

# resizing to all our images
train = raw_train.map(format_example)
validation = raw_validation.map(format_example)
test = raw_test.map(format_example)

for image, label in train.take(2):
  plt.figure()
  plt.imshow(image)
  plt.title(get_label_name(label))

# shuffle and batch the images

BATCH_SIZE = 32
SHUFFLE_BUFFER_SIZE = 1000

train_batches = train.shuffle(SHUFFLE_BUFFER_SIZE).batch(BATCH_SIZE)
validation_batches = validation.batch(BATCH_SIZE)
test_batches = test.batch(BATCH_SIZE)

for img, label in raw_train.take(2):
  print("Original shape:", img.shape)

for img, label in train.take(2):
  print("New shape:", img.shape)

# picking a pretrained model without the top(classification) layer.
IMG_SHAPE = (IMG_SIZE, IMG_SIZE, 3)

# Create the base model from the pre-trained model MobileNet V2
base_model = tf.keras.applications.MobileNetV2(input_shape=IMG_SHAPE,
                                               include_top=False,
                                               weights='imagenet')

base_model.summary()

for image, _ in train_batches.take(1):
   pass

feature_batch = base_model(image)
print(feature_batch.shape)

# freezing the base model (conv. model) as we don't want to change the weights of a pretrained model.

base_model.trainable = False

base_model.summary()

# now, adding our classifier
global_average_layer = tf.keras.layers.GlobalAveragePooling2D()

# adding the prediction layer
prediction_layer = keras.layers.Dense(1)

# combinig these layers into our model
model = tf.keras.Sequential([
  base_model,
  global_average_layer,
  prediction_layer
])

model.summary()

# Training the model

base_learning_rate = 0.0001
model.compile(optimizer=tf.keras.optimizers.RMSprop(lr=base_learning_rate),
              loss=tf.keras.losses.BinaryCrossentropy(from_logits=True),
              metrics=['accuracy'])

# evaluating the model

initial_epochs = 3
validation_steps=20

loss0,accuracy0 = model.evaluate(validation_batches, steps = validation_steps)

# training on our images

history = model.fit(train_batches,
                    epochs=initial_epochs,
                    validation_data=validation_batches)

acc = history.history['accuracy']
print(acc)

!git remote add origin https://github.com/Aseeeem-kc/Convolutional-neural-networks.git

!git clone https://github.com/Aseeeem-kc/Convolutional-neural-networks.git

# Commented out IPython magic to ensure Python compatibility.
# %cd Convolutional-neural-networks

!git add CatsVsDogs.ipynb

